plugins {
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

group = 'com.github.chubbard'
//version = '0.2.0'
version = '0.2.0-SNAPSHOT'
description = """
GroovyMail aims to replace using JavaMail as the API to send email in Groovy by 
building a domain specific language (DSL) on top of JavaMail to make 
sending email simpler.
"""

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.15'

    //compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
    compile "com.sun.mail:javax.mail:1.6.2"

    compile 'org.slf4j:slf4j-api:1.8.0-beta2'

    // Use the awesome Spock testing and specification framework
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.slf4j:slf4j-log4j12:1.8.0-beta2'
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        groovymail(MavenPublication) {
            from components.java

            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/chubbard/groovymail'
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "chubbard"
                        name = "Charlie Hubbard"
                        email = "groovymail@fuseanalytics.com"
                    }
                }
                scm {
                    connection = "https://github.com/chubbard/groovymail.git"
                    developerConnection = "scm:https://github.com/chubbard/groovymail.git"
                    url = "https://github.com/chubbard/groovymail.git"
                }
            }

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc|groovydoc)\.zip\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }

    repositories {
        maven {
            url project.version.endsWith('-SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
        mavenLocal()
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    extension 'zip'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc ) {
    classifier 'groovydoc'
    extension 'zip'
    from groovydoc.destinationDir
}

artifacts {
    archives jar
    archives groovydocJar
    archives sourceJar
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

model {
    tasks.generatePomFileForGroovymailPublication {
        destination = file("$buildDir/generated-pom.xml")
    }

    tasks.publishGroovymailPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishGroovymailPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}
